=====================================================================
================== Szablony =========================================
=====================================================================
0. Wszelkie symbole interpretowane jako CaseSensitive.



1. Proste definicje (#define NAME VAL) są wstawiane w znacznikach $[NAME].



2. Makra dla struktur definiuje się przez:
$MACRO_TYPE NAZWA
... ciało makra
$ENDM
, gdzie TYPE jest typem struktury (obecnie tylko REGION, SECTION), NAZWA jest identyfikatorem makra (nie mogą się powtarzać).

Do pól lokalnych odnosi się za pomocą instrukcji $LOC[L_L], gdzie L_L jest nazwą składowej lokalnej struktury (SECTION={NAME, LMA_ADDR, VMA_ADDR, TYPE, KEEP, NOLOAD}, REGION={NAME, RIGHTS, ADR, SIZE}), taki znacznik zostanie podmieniony na wartość zawartą w atrybucie lokalnym. Znaczniki $MACRO_SECTION NAZWA i $ENDM muszą się znajdować na początku lini, wszystkie za nimi do końca linii zostaną zignorowane.

W miejscu pojewienia się instrukcji $MAC[NAZWA] makro zostanie rozwinięte po kolei dla wszystkich zdefiniowanych struktur danego typu.

 Makra mogą być wywoływane wewnętrz siebie ale nie mogą być definiowane wewnątrz siebie, np. szablon:
$MACRO_SECTION XXX
...
$MAC[YYY]
...
$ENDM
$MACRO_SECTION YYY
...
$ENDM
zostanie prawidłowo zinterpretowany, natomiast:
$MACRO_SECTION XXX
$MACRO_SECTION YYY
...
$ENDM
...
$MAC[YYY]
...
$ENDM
nie zadziała (nie gwarantuję, że program taki błąd wychwyci, możliwe jest niezdefiniowane zachowanie).

W pierwszym kroku wszystkie makra są ładowane, dopiero później są rozwijane - nie ma tu problemu definicji i deklaracji jak w c.

Instrukcja $MAC[NAZWA], zostanie zignorowany gdy makro o nazwie NAZWA nie zostanie zdefiniowana.


2b. Wewnątrz makr można używać znaczników $T do wyrównywania tekstu. Wszystkie miejsca oznaczone $T zostaną wyrównane spacjami do jednej kolumny (wielokrotność czwórki), można wstawiać kilka znaczników $T w jednej linii, wspólnie wyrównywane są i-te wystąpienia tego znacznika. Liczba wystąpień $T nie musi się zgadzać w kolejnych liniach.



3. Instrukcje warunkowe zapisywane są jako:
$IF[WARUNEK]
...ble ble ble...
$ELSIF[WARUNEK]
...ble ble ble...
$ELSE
...ble ble ble...
$ENDIF
Warunek może być pojedynczym tekstem (pusty string zostanie potraktowany jako fałsz, każdy inny jako prawda, rozwijanie warunków następuje po rozwinięciu wszystkich stałych) lub dwoma tekstami rozdzielonymi instrukcją relacji (==, !=, >=, <=, >, <), wartości porównywane są jako stringi w konwencji CaseSensitive. UWAGA! Wstawienie nierozpoznanegj instrukcji relacji spowoduje potraktowanie całego warunku jako pojedynczego słowa (np. A=B) co zawsze zostanie odczytane jako prawda. Warunki nie mogą być łączone (np. $IF[A==B==C]) Wszystkie spacje z wnętrza nawiasów warunku zostaną usunięte. Każde ze słów kluczowych $IF, $ELSIF, $ELSE, $ENDIF musi się znajdować z osobnej lini (na jej początku), wszelkie dane z tej lini znajdujące się poza instrukcją zostaną pominięte.



4. Warunkowe wpychanie w nawiasy realizowane jest za pomocą instrukcji:
$BRA[COND][FUN]jakiś tam tekst$ENDB
, gdzie:
 - COND jest warunkiem zamknięcia tekstu w nawias,
 - FUN tekstem dodanym przed nawias jeżeli wartość COND zwraca true, FUN może być pustym tekstem.

Przykład 1:
config.h: #define VAL
template.ld: $BRA[VAL][fun]jakiś tam tekst$ENDB
linker.ld: jakiś tam tekst

Przykład 2:
config.h: #define VAL xyz
template.ld: $BRA[VAL][fun]jakiś tam tekst$ENDB
linker.ld: fun(jakiś tam tekst)



5. Przetwarzanie szablonów przez program odbywa się w kolejności:
 - Ładowanie wszystkich makr z szablonu.
 - Rozwijanie makr.
 - Zastępowanie prostych definicji.
 - Rozwijanie $IF itp.
 - Rozwijanie $BRA

Każdy krok jest tak długo powtarzany aż się z wszystkiego wystrzela, ale po tym algorytm już do niego nie wraca. Tak więc wpisanie do którejś ze struktur mazwy prostej definicji spowoduje rozwinięcie jej przez makro a następnie podmienienie na styl przeprocesora, ale w drugą stronę to już nie zadziała.



=====================================================================
================== Pliki konfiguracyjne =============================
=====================================================================
Definicje różnych typów danych muszą być oznaczone znacznikami, np.:

... Jakieś tam nieistotne dane i definicje
#define KIKOWA_STALA KIJOWA_WARTOSC
...
... Wartości stosów
//##DSTCK
#define MAIN_STACK_SIZE                     666
#define PROCESS_STACK_SIZE                  666
... Wartości do wyboru z regionów
//##DREG
#define STACK_REGION                        CCM_RAM
#define HEAP_REGION                         RAM
...
//##REGION
... Definicje sekcji typu REGION
/**                         Nazwa           Prawa        Adres        Rozmiar   */
#define REGION_0            ROM           , RX         , 0x08000000 , 2M
#define REGION_1            RAM           , RWX        , 0x20000000 , 112k
...
//##SECTION
... Definicje sekcji typu SECTION
/**                         Nazwa           LMA_ADDR     VMA_ADDR     TYPE         KEEP         NOLOAD   */
#define SECTION_0           FUNC_RAM      , ROM        , RAM        , DATA       ,            , 
#define SECTION_1           SRAM          , SRAM       , SRAM       , NOINIT     ,            , NOLOAD
...

Czytane z pliku będą tylko linie poprzedzone znacznikiem //##JAKISTAMCOSTAM oraz rozpoczynający się #define.
